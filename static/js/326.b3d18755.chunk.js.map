{"version":3,"file":"static/js/326.b3d18755.chunk.js","mappings":"wKAIA,MAuGA,EAvGoBA,KAChB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,KAC1BG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,CACnCK,MAAO,0BACLC,MAAO,gFAEPC,SAAU,gEACTC,EAASC,IAAcT,EAAAA,EAAAA,UAAS,IAUjCU,EAAsBC,IAEpBZ,EADc,KAAfY,EACU,GAEAR,EAAQQ,GACrB,EASJ,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SAAC,kBAC1BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAClCC,EAAAA,EAAAA,KAAA,YACIF,UAAU,aACVG,YAAY,qBACZC,MAAOhB,EACPiB,SA1BkBC,IACtBjB,EAAQiB,EAAEC,OAAOH,MAAM,OA4BnBL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SACIF,UAAU,cACVQ,KAAK,OACLL,YAAY,sBACZC,MAAOnB,EACPoB,SAvCWC,IACvBpB,EAASoB,EAAEC,OAAOH,MAAM,KAwChBF,EAAAA,EAAAA,KAAA,UAAQF,UAAU,eAAeS,QAzBzBC,KAChB,MAAMC,EAAK,IAAIC,OAAO3B,GAChB4B,EAAezB,EAAK0B,MAAMH,IAAO,GACvCf,EAAWiB,EAAa,EAsBsCZ,SAAC,cAE3DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIM,KAAK,QACLO,KAAK,UACLC,QAAmB,KAAV/B,EACToB,SAAUA,IAAMR,EAAmB,MACrC,gCAGNE,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIM,KAAK,QACLO,KAAK,UACLC,QAAS/B,IAAUK,EAAQI,SAC3BW,SAAUA,IAAMR,EAAmB,cACrC,+BAGNE,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIM,KAAK,QACLO,KAAK,UACLC,QAAS/B,IAAUK,EAAQG,MAC3BY,SAAUA,IAAMR,EAAmB,WACrC,yBAGNE,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIM,KAAK,QACLO,KAAK,UACLC,QAAS/B,IAAUK,EAAQE,MAC3Ba,SAAUA,IAAMR,EAAmB,WACrC,wCAIVE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,cAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UAASC,SACnBN,EAAQsB,KAAI,CAACH,EAAOI,KACjBhB,EAAAA,EAAAA,KAAA,QAAkBF,UAAU,QAAOC,SAAEa,GAA1BI,YAIrB,C","sources":["Pages/Regex/RegexTester.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './RegexTester.css';\nimport {javaDefaultValue} from \"../Ide/defaultValues\";\n\nconst RegexTester = () => {\n    const [regex, setRegex] = useState('');\n    const [text, setText] = useState('');\n    const [options, setOptions] = useState({\n        phone: '\\\\d{3}-\\\\d{3,4}-\\\\d{4}$'\n        , email: '[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}'\n        // 특수문자 / 문자 / 숫자 포함 형태의 8~15자리 이내의 암호 정규식\n        , password: '.*(?=^.{8,15}$)(?=.*\\\\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$'});\n    const [matches, setMatches] = useState([]);\n\n    const handleRegexChange = (e) => {\n        setRegex(e.target.value);\n    };\n\n    const handleTextChange = (e) => {\n        setText(e.target.value);\n    };\n\n    const handleOptionChange = (optionName) => {\n        if(optionName === ''){\n            setRegex('');\n        } else {\n            setRegex(options[optionName]);\n        }\n    };\n\n    const handleMatch = () => {\n        const re = new RegExp(regex);\n        const foundMatches = text.match(re) || [];\n        setMatches(foundMatches);\n    };\n\n    return (\n        <div className=\"regex-tester\">\n            <h1 className=\"app-title\">Regex Tester</h1>\n            <div className=\"input-section\">\n        <textarea\n            className=\"text-input\"\n            placeholder=\"Enter text here...\"\n            value={text}\n            onChange={handleTextChange}\n        />\n            </div>\n            <div className=\"input-section\">\n                <input\n                    className=\"regex-input\"\n                    type=\"text\"\n                    placeholder=\"Enter regex here...\"\n                    value={regex}\n                    onChange={handleRegexChange}\n                />\n                <button className=\"match-button\" onClick={handleMatch}>Match</button>\n            </div>\n            <div className=\"options-section\">\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"options\"\n                        checked={regex === ''}\n                        onChange={() => handleOptionChange('')}\n                    />\n                    직접 입력\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"options\"\n                        checked={regex === options.password}\n                        onChange={() => handleOptionChange('password')}\n                    />\n                    비밀번호\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"options\"\n                        checked={regex === options.email}\n                        onChange={() => handleOptionChange('email')}\n                    />\n                    이메일\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"options\"\n                        checked={regex === options.phone}\n                        onChange={() => handleOptionChange('phone')}\n                    />\n                    휴대폰번호\n                </label>\n            </div>\n            <div className=\"matches-section\">\n                <h2 className=\"matches-title\">Matches:</h2>\n                <div className=\"matches\">\n                    {matches.map((match, index) => (\n                        <span key={index} className=\"match\">{match}</span>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RegexTester;\n"],"names":["RegexTester","regex","setRegex","useState","text","setText","options","setOptions","phone","email","password","matches","setMatches","handleOptionChange","optionName","_jsxs","className","children","_jsx","placeholder","value","onChange","e","target","type","onClick","handleMatch","re","RegExp","foundMatches","match","name","checked","map","index"],"sourceRoot":""}