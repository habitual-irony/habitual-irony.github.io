{"version":3,"file":"static/js/205.fb174895.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","Pages/Regex/RegexTester.js"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, {useRef, useState} from 'react';\nimport './RegexTester.css';\nimport {CCard, CCardBody, CCardText, CCardTitle, CCol, CFormCheck, CRow,} from '@coreui/react';\nimport Editor from \"@monaco-editor/react\";\n\nconst RegexTester = () => {\n    const [regex, setRegex] = useState('');\n    const [text, setText] = useState('');\n    const [matches, setMatches] = useState([]);\n    const editorRef = useRef(null);\n    const [options, setOptions] = useState({\n        '직접 입력': '',\n        '휴대폰번호': '\\\\d{3}-\\\\d{3,4}-\\\\d{4}$',\n        '이메일': '^[a-zA-Z0-9+-\\\\_.]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$',\n        '비밀번호': '.*(?=^.{8,15}$)(?=.*\\\\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$'\n    });\n\n    const handleRegexChange = (e) => {\n        setRegex(e.target.value);\n    };\n\n    const handleOptionChange = (option) => {\n        setRegex(options[option]);\n    };\n\n    const handleEditorDidMount = (editor) => {\n        editorRef.current = editor;\n    };\n\n    const handleEditorChange = (value) => {\n        setText(value, () => {\n            const re = new RegExp(regex, 'gm');\n            const foundMatches = text.match(re) || [];\n            setMatches(foundMatches);\n        });\n    };\n\n    const editorOptions = {\n        selectOnLineNumbers: true,\n        automaticLayout: true,\n        fontSize: 14,\n        minimap: {\n            enabled: true,\n        },\n        suggest: {\n            // 자동완성 제안 활성화\n            snippetsPreventQuickSuggestions: true,\n            suggestions: [],\n        },\n        padding: {\n            top: 10,\n            bottom: 10,\n            left: 20,\n            right: 20,\n        },\n        tabSize: 2,\n    };\n\n    return (\n        <CRow>\n            <CCol xs={12} className={'mb-2'}>\n                <Editor\n                    height='calc(40vh)'\n                    width='100%'\n                    defaultLanguage='java'\n                    onMount={handleEditorDidMount}\n                    value={text}\n                    options={editorOptions}\n                    onChange={handleEditorChange}\n                />\n            </CCol>\n            <CCol xs={12} className={'mb-2'}>\n                {Object.keys(options).map((option, index) => (\n                    <CFormCheck\n                        key={index}\n                        id={option}\n                        name=\"options\"\n                        label={option}\n                        checked={regex === options[option]}\n                        onChange={() => handleOptionChange(option)}\n                    />\n                ))}\n            </CCol>\n            <CCol xs={12} className={'mb-2'}>\n                <textarea\n                    className=\"regex-input\"\n                    placeholder=\"Enter regex here...\"\n                    value={regex}\n                    onChange={handleRegexChange}\n                />\n            </CCol>\n            <CCol xs={12} className={'mb-2'}>\n                <CCard>\n                    <CCardBody>\n                        <CCardTitle>Matches:</CCardTitle>\n                        <CCardText>\n                            {matches.map((match, index) => (\n                                <span key={index} className=\"match\">{match}</span>\n                            ))}\n                        </CCardText>\n                    </CCardBody>\n                </CCard>\n            </CCol>\n        </CRow>\n    );\n};\n\nexport default RegexTester;\n"],"names":["CFormFeedback","forwardRef","_a","ref","children","_c","as","Component","className","invalid","tooltip","valid","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","displayName","CFormControlValidation","describedby","feedback","feedbackInvalid","feedbackValid","tooltipFeedback","id","CFormLabel","customClassName","CFormCheck","button","floatingLabel","hitArea","indeterminate","inline","label","reverse","type","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","FormValidation","FormLabel","variant","color","size","shape","htmlFor","RegexTester","regex","setRegex","useState","text","setText","matches","setMatches","editorRef","options","setOptions","_jsxs","CRow","_jsx","CCol","xs","Editor","height","width","defaultLanguage","onMount","editor","value","selectOnLineNumbers","automaticLayout","fontSize","minimap","enabled","suggest","snippetsPreventQuickSuggestions","suggestions","padding","top","bottom","left","right","tabSize","onChange","re","RegExp","foundMatches","match","Object","keys","map","option","index","name","checked","handleOptionChange","placeholder","e","target","CCard","CCardBody","CCardTitle","CCardText"],"sourceRoot":""}