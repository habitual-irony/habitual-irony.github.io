{"version":3,"file":"static/js/118.b3b63ab0.chunk.js","mappings":"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","sources":["Pages/Chonky/Chonky.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef, useMemo} from \"react\";\nimport { setChonkyDefaults, ChonkyActions, FileHelper, FullFileBrowser} from \"chonky\";\nimport { ChonkyIconFA } from \"chonky-icon-fontawesome\";\n\nimport Box from \"@mui/material/Box\";\n\nconst demoMap = require(\"./demo.json\");\n\nconst prepareCustomFileMap = () => {\n    const baseFileMap = demoMap.fileMap;\n    const rootFolderId = demoMap.rootFolderId;\n    return { baseFileMap, rootFolderId };\n};\n\nconst useCustomFileMap = () => {\n    const { baseFileMap, rootFolderId } = useMemo(prepareCustomFileMap, []);\n\n    const [fileMap, setFileMap] = useState(baseFileMap);\n    const [currentFolderId, setCurrentFolderId] = useState(rootFolderId);\n\n    const resetFileMap = useCallback(() => {\n        setFileMap(baseFileMap);\n        setCurrentFolderId(rootFolderId);\n    }, [baseFileMap, rootFolderId]);\n\n    const currentFolderIdRef = useRef(currentFolderId);\n    useEffect(() => {\n        currentFolderIdRef.current = currentFolderId;\n    }, [currentFolderId]);\n\n    const deleteFiles = useCallback((files) => {\n        setFileMap((currentFileMap) => {\n            const newFileMap = { ...currentFileMap };\n            files.forEach((file) => {\n                delete newFileMap[file.id];\n\n                if (file.parentId) {\n                    const parent = newFileMap[file.parentId];\n                    const newChildrenIds = parent.childrenIds.filter(\n                        (id) => id !== file.id\n                    );\n                    newFileMap[file.parentId] = {\n                        ...parent,\n                        childrenIds: newChildrenIds,\n                        childrenCount: newChildrenIds.length,\n                    };\n                }\n            });\n\n            return newFileMap;\n        });\n    }, []);\n\n    const moveFiles = useCallback((files, source, destination) => {\n        setFileMap((currentFileMap) => {\n            const newFileMap = { ...currentFileMap };\n            const moveFileIds = new Set(files.map((f) => f.id));\n\n            const newSourceChildrenIds = source.childrenIds.filter(\n                (id) => !moveFileIds.has(id)\n            );\n            newFileMap[source.id] = {\n                ...source,\n                childrenIds: newSourceChildrenIds,\n                childrenCount: newSourceChildrenIds.length,\n            };\n\n            const newDestinationChildrenIds = [\n                ...destination.childrenIds,\n                ...files.map((f) => f.id),\n            ];\n            newFileMap[destination.id] = {\n                ...destination,\n                childrenIds: newDestinationChildrenIds,\n                childrenCount: newDestinationChildrenIds.length,\n            };\n\n            files.forEach((file) => {\n                newFileMap[file.id] = {\n                    ...file,\n                    parentId: destination.id,\n                };\n            });\n\n            return newFileMap;\n        });\n    }, []);\n\n    const idCounter = useRef(0);\n    const createFolder = useCallback((folderName) => {\n        setFileMap((currentFileMap) => {\n            const newFileMap = { ...currentFileMap };\n\n            const newFolderId = `new-folder-${idCounter.current++}`;\n            newFileMap[newFolderId] = {\n                id: newFolderId,\n                name: folderName,\n                isDir: true,\n                modDate: new Date(),\n                parentId: currentFolderIdRef.current,\n                childrenIds: [],\n                childrenCount: 0,\n            };\n\n            const parent = newFileMap[currentFolderIdRef.current];\n            newFileMap[currentFolderIdRef.current] = {\n                ...parent,\n                childrenIds: [...parent.childrenIds, newFolderId],\n            };\n\n            return newFileMap;\n        });\n    }, []);\n\n    return {\n        fileMap,\n        currentFolderId,\n        setCurrentFolderId,\n        resetFileMap,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n    };\n};\n\nconst useFiles = (fileMap, currentFolderId) => {\n    return useMemo(() => {\n        const currentFolder = fileMap[currentFolderId];\n        const childrenIds = currentFolder.childrenIds;\n        const files = childrenIds.map((fileId) => fileMap[fileId]);\n        return files;\n    }, [currentFolderId, fileMap]);\n};\n\nconst useFolderChain = (fileMap, currentFolderId) => {\n    return useMemo(() => {\n        const currentFolder = fileMap[currentFolderId];\n        const folderChain = [currentFolder];\n        let parentId = currentFolder.parentId;\n        while (parentId) {\n            const parentFile = fileMap[parentId];\n            if (parentFile) {\n                folderChain.unshift(parentFile);\n                parentId = parentFile.parentId;\n            } else {\n                break;\n            }\n        }\n        return folderChain;\n    }, [currentFolderId, fileMap]);\n};\n\nconst useFileActionHandler = (\n    setCurrentFolderId,\n    deleteFiles,\n    moveFiles,\n    createFolder\n) => {\n    return useCallback(\n        (data) => {\n            if (data.id === ChonkyActions.OpenFiles.id) {\n                const { targetFile, files } = data.payload;\n                const fileToOpen = targetFile || files[0];\n                if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n                    setCurrentFolderId(fileToOpen.id);\n                    return;\n                }\n            } else if (data.id === ChonkyActions.DeleteFiles.id) {\n                deleteFiles(data.state.selectedFilesForAction);\n            } else if (data.id === ChonkyActions.MoveFiles.id) {\n                moveFiles(\n                    data.payload.files,\n                    data.payload.source,\n                    data.payload.destination\n                );\n            } else if (data.id === ChonkyActions.CreateFolder.id) {\n                const folderName = prompt(\"Provide the name for your new folder:\");\n                if (folderName) createFolder(folderName);\n            }\n        },\n        [createFolder, deleteFiles, moveFiles, setCurrentFolderId]\n    );\n};\n\nconst ChonkyBrowser = React.memo((props) => {\n    const {\n        fileMap,\n        currentFolderId,\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n    } = useCustomFileMap();\n\n    setChonkyDefaults({ iconComponent: ChonkyIconFA });\n\n    const files = useFiles(fileMap, currentFolderId);\n    const folderChain = useFolderChain(fileMap, currentFolderId);\n    const handleFileAction = useFileActionHandler(\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder\n    );\n\n    const fileActions = useMemo(\n        () => [ChonkyActions.CreateFolder\n            , ChonkyActions.DeleteFiles\n            , ChonkyActions.CopyFiles\n            , ChonkyActions.UploadFiles\n            , ChonkyActions.DownloadFiles\n            , ChonkyActions.ToggleDarkMode],\n        []\n    );\n\n    const thumbnailGenerator = useCallback(\n        (file) =>\n            file.thumbnailUrl ? `https://chonky.io${file.thumbnailUrl}` : null,\n        []\n    );\n\n    return (\n        <Box sx={{ m: 2 }}>\n            <div style={{ height: 400 }}>\n                <FullFileBrowser\n                    files={files}\n                    folderChain={folderChain}\n                    fileActions={fileActions}\n                    onFileAction={handleFileAction}\n                    thumbnailGenerator={thumbnailGenerator}\n                    disableDefaultFileActions={false}\n                    {...props}\n                />\n            </div>\n        </Box>\n    );\n});\n\nexport default ChonkyBrowser;\n"],"names":["demoMap","require","prepareCustomFileMap","baseFileMap","fileMap","rootFolderId","React","props","currentFolderId","setCurrentFolderId","deleteFiles","moveFiles","createFolder","useCustomFileMap","useMemo","setFileMap","useState","resetFileMap","useCallback","currentFolderIdRef","useRef","useEffect","current","files","currentFileMap","newFileMap","forEach","file","id","parentId","parent","newChildrenIds","childrenIds","filter","childrenCount","length","source","destination","moveFileIds","Set","map","f","newSourceChildrenIds","has","newDestinationChildrenIds","idCounter","folderName","newFolderId","concat","name","isDir","modDate","Date","setChonkyDefaults","iconComponent","ChonkyIconFA","useFiles","fileId","folderChain","useFolderChain","currentFolder","parentFile","unshift","handleFileAction","useFileActionHandler","data","ChonkyActions","OpenFiles","targetFile","payload","fileToOpen","FileHelper","isDirectory","DeleteFiles","state","selectedFilesForAction","MoveFiles","CreateFolder","prompt","fileActions","CopyFiles","UploadFiles","DownloadFiles","ToggleDarkMode","thumbnailGenerator","thumbnailUrl","_jsx","Box","sx","m","children","style","height","FullFileBrowser","onFileAction","disableDefaultFileActions"],"sourceRoot":""}