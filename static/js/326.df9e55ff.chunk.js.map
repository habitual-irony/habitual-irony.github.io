{"version":3,"file":"static/js/326.df9e55ff.chunk.js","mappings":"wKAIA,MA2EA,EA3EoBA,KAChB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,KAC1BG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,CAAEK,YAAY,EAAOC,WAAW,KAChEC,EAASC,IAAcR,EAAAA,EAAAA,UAAS,IAUjCS,EAAsBC,IACxBN,EAAW,IAAKD,EAAS,CAACO,IAAcP,EAAQO,IAAc,EASlE,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SAAC,kBAC1BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAClCC,EAAAA,EAAAA,KAAA,YACIF,UAAU,aACVG,YAAY,qBACZC,MAAOf,EACPgB,SAtBkBC,IACtBhB,EAAQgB,EAAEC,OAAOH,MAAM,OAwBnBL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SACIF,UAAU,cACVQ,KAAK,OACLL,YAAY,sBACZC,MAAOlB,EACPmB,SAnCWC,IACvBnB,EAASmB,EAAEC,OAAOH,MAAM,KAoChBF,EAAAA,EAAAA,KAAA,UAAQF,UAAU,eAAeS,QAzBzBC,KAChB,MAAMC,EAAK,IAAIC,OAAO1B,EAAM,GAAD2B,OAAKtB,EAAQE,WAAa,IAAM,IAAEoB,OAAGtB,EAAQG,UAAY,IAAM,KACpFoB,EAAezB,EAAK0B,MAAMJ,IAAO,GACvCf,EAAWkB,EAAa,EAsBsCb,SAAC,cAE3DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIM,KAAK,WACLQ,QAASzB,EAAQE,WACjBY,SAAUA,IAAMR,EAAmB,gBACrC,kBAGNE,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIM,KAAK,WACLQ,QAASzB,EAAQG,UACjBW,SAAUA,IAAMR,EAAmB,eACrC,mBAIVE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,cAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UAASC,SACnBN,EAAQsB,KAAI,CAACF,EAAOG,KACjBhB,EAAAA,EAAAA,KAAA,QAAkBF,UAAU,QAAOC,SAAEc,GAA1BG,YAIrB,C","sources":["Pages/Regex/RegexTester.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './RegexTester.css';\nimport {javaDefaultValue} from \"../Ide/defaultValues\";\n\nconst RegexTester = () => {\n    const [regex, setRegex] = useState('');\n    const [text, setText] = useState('');\n    const [options, setOptions] = useState({ ignoreCase: false, multiline: false });\n    const [matches, setMatches] = useState([]);\n\n    const handleRegexChange = (e) => {\n        setRegex(e.target.value);\n    };\n\n    const handleTextChange = (e) => {\n        setText(e.target.value);\n    };\n\n    const handleOptionChange = (optionName) => {\n        setOptions({ ...options, [optionName]: !options[optionName] });\n    };\n\n    const handleMatch = () => {\n        const re = new RegExp(regex, `${options.ignoreCase ? 'i' : ''}${options.multiline ? 'm' : ''}`);\n        const foundMatches = text.match(re) || [];\n        setMatches(foundMatches);\n    };\n\n    return (\n        <div className=\"regex-tester\">\n            <h1 className=\"app-title\">Regex Tester</h1>\n            <div className=\"input-section\">\n        <textarea\n            className=\"text-input\"\n            placeholder=\"Enter text here...\"\n            value={text}\n            onChange={handleTextChange}\n        />\n            </div>\n            <div className=\"input-section\">\n                <input\n                    className=\"regex-input\"\n                    type=\"text\"\n                    placeholder=\"Enter regex here...\"\n                    value={regex}\n                    onChange={handleRegexChange}\n                />\n                <button className=\"match-button\" onClick={handleMatch}>Match</button>\n            </div>\n            <div className=\"options-section\">\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={options.ignoreCase}\n                        onChange={() => handleOptionChange('ignoreCase')}\n                    />\n                    Ignore Case\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={options.multiline}\n                        onChange={() => handleOptionChange('multiline')}\n                    />\n                    Multiline\n                </label>\n            </div>\n            <div className=\"matches-section\">\n                <h2 className=\"matches-title\">Matches:</h2>\n                <div className=\"matches\">\n                    {matches.map((match, index) => (\n                        <span key={index} className=\"match\">{match}</span>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RegexTester;\n"],"names":["RegexTester","regex","setRegex","useState","text","setText","options","setOptions","ignoreCase","multiline","matches","setMatches","handleOptionChange","optionName","_jsxs","className","children","_jsx","placeholder","value","onChange","e","target","type","onClick","handleMatch","re","RegExp","concat","foundMatches","match","checked","map","index"],"sourceRoot":""}