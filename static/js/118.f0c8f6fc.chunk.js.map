{"version":3,"file":"static/js/118.f0c8f6fc.chunk.js","mappings":"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","sources":["Pages/Chonky/Chonky.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef, useMemo} from \"react\";\nimport { setChonkyDefaults, ChonkyActions, FileHelper, FullFileBrowser} from \"chonky\";\nimport { ChonkyIconFA } from \"chonky-icon-fontawesome\";\nimport Box from \"@mui/material/Box\";\n\nconst demoMap = require(\"./demo.json\");\n\n\n\nconst ChonkyBrowser = React.memo((props) => {\n    const [darkMode, setDarkMode] = useState(false);\n\n    const toggleDarkMode = () => {\n        setDarkMode(!darkMode);\n    }\n\n    const prepareCustomFileMap = () => {\n        const baseFileMap = demoMap.fileMap;\n        const rootFolderId = demoMap.rootFolderId;\n        return { baseFileMap, rootFolderId };\n    };\n\n    const useCustomFileMap = () => {\n        const { baseFileMap, rootFolderId } = useMemo(prepareCustomFileMap, []);\n\n        const [fileMap, setFileMap] = useState(baseFileMap);\n        const [currentFolderId, setCurrentFolderId] = useState(rootFolderId);\n\n        const resetFileMap = useCallback(() => {\n            setFileMap(baseFileMap);\n            setCurrentFolderId(rootFolderId);\n        }, [baseFileMap, rootFolderId]);\n\n        const currentFolderIdRef = useRef(currentFolderId);\n        useEffect(() => {\n            currentFolderIdRef.current = currentFolderId;\n        }, [currentFolderId]);\n\n        const deleteFiles = useCallback((files) => {\n            setFileMap((currentFileMap) => {\n                const newFileMap = { ...currentFileMap };\n                files.forEach((file) => {\n                    delete newFileMap[file.id];\n\n                    if (file.parentId) {\n                        const parent = newFileMap[file.parentId];\n                        const newChildrenIds = parent.childrenIds.filter(\n                            (id) => id !== file.id\n                        );\n                        newFileMap[file.parentId] = {\n                            ...parent,\n                            childrenIds: newChildrenIds,\n                            childrenCount: newChildrenIds.length,\n                        };\n                    }\n                });\n\n                return newFileMap;\n            });\n        }, []);\n\n        const moveFiles = useCallback((files, source, destination) => {\n            setFileMap((currentFileMap) => {\n                const newFileMap = { ...currentFileMap };\n                const moveFileIds = new Set(files.map((f) => f.id));\n\n                const newSourceChildrenIds = source.childrenIds.filter(\n                    (id) => !moveFileIds.has(id)\n                );\n                newFileMap[source.id] = {\n                    ...source,\n                    childrenIds: newSourceChildrenIds,\n                    childrenCount: newSourceChildrenIds.length,\n                };\n\n                const newDestinationChildrenIds = [\n                    ...destination.childrenIds,\n                    ...files.map((f) => f.id),\n                ];\n                newFileMap[destination.id] = {\n                    ...destination,\n                    childrenIds: newDestinationChildrenIds,\n                    childrenCount: newDestinationChildrenIds.length,\n                };\n\n                files.forEach((file) => {\n                    newFileMap[file.id] = {\n                        ...file,\n                        parentId: destination.id,\n                    };\n                });\n\n                return newFileMap;\n            });\n        }, []);\n\n        const idCounter = useRef(0);\n        const createFolder = useCallback((folderName) => {\n            setFileMap((currentFileMap) => {\n                const newFileMap = { ...currentFileMap };\n\n                const newFolderId = `new-folder-${idCounter.current++}`;\n                newFileMap[newFolderId] = {\n                    id: newFolderId,\n                    name: folderName,\n                    isDir: true,\n                    modDate: new Date(),\n                    parentId: currentFolderIdRef.current,\n                    childrenIds: [],\n                    childrenCount: 0,\n                };\n\n                const parent = newFileMap[currentFolderIdRef.current];\n                newFileMap[currentFolderIdRef.current] = {\n                    ...parent,\n                    childrenIds: [...parent.childrenIds, newFolderId],\n                };\n\n                return newFileMap;\n            });\n        }, []);\n\n        return {\n            fileMap,\n            currentFolderId,\n            setCurrentFolderId,\n            resetFileMap,\n            deleteFiles,\n            moveFiles,\n            createFolder,\n        };\n    };\n\n    const useFiles = (fileMap, currentFolderId) => {\n        return useMemo(() => {\n            const currentFolder = fileMap[currentFolderId];\n            const childrenIds = currentFolder.childrenIds;\n            const files = childrenIds.map((fileId) => fileMap[fileId]);\n            return files;\n        }, [currentFolderId, fileMap]);\n    };\n\n    const useFolderChain = (fileMap, currentFolderId) => {\n        return useMemo(() => {\n            const currentFolder = fileMap[currentFolderId];\n            const folderChain = [currentFolder];\n            let parentId = currentFolder.parentId;\n            while (parentId) {\n                const parentFile = fileMap[parentId];\n                if (parentFile) {\n                    folderChain.unshift(parentFile);\n                    parentId = parentFile.parentId;\n                } else {\n                    break;\n                }\n            }\n            return folderChain;\n        }, [currentFolderId, fileMap]);\n    };\n\n    const useFileActionHandler = (\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n        toggleDarkMode\n    ) => {\n        return useCallback(\n            (data) => {\n                if (data.id === ChonkyActions.OpenFiles.id) {\n                    const { targetFile, files } = data.payload;\n                    const fileToOpen = targetFile || files[0];\n                    if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n                        setCurrentFolderId(fileToOpen.id);\n                        return;\n                    }\n                } else if (data.id === ChonkyActions.DeleteFiles.id) {\n                    deleteFiles(data.state.selectedFilesForAction);\n                } else if (data.id === ChonkyActions.MoveFiles.id) {\n                    moveFiles(\n                        data.payload.files,\n                        data.payload.source,\n                        data.payload.destination\n                    );\n                } else if (data.id === ChonkyActions.CreateFolder.id) {\n                    const folderName = prompt(\"Provide the name for your new folder:\");\n                    if (folderName) createFolder(folderName);\n                } else if (data.id === ChonkyActions.ToggleDarkMode.id) {\n                    toggleDarkMode();\n                }\n            },\n            [createFolder, deleteFiles, moveFiles, setCurrentFolderId, toggleDarkMode]\n        );\n    };\n\n    const {\n        fileMap,\n        currentFolderId,\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n    } = useCustomFileMap();\n\n\n    setChonkyDefaults({ iconComponent: ChonkyIconFA });\n\n    const files = useFiles(fileMap, currentFolderId);\n    const folderChain = useFolderChain(fileMap, currentFolderId);\n    const handleFileAction = useFileActionHandler(\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n        toggleDarkMode\n    );\n\n    const fileActions = useMemo(\n        () => [ChonkyActions.CreateFolder\n            , ChonkyActions.DeleteFiles\n            // , ChonkyActions.CopyFiles\n            // , ChonkyActions.UploadFiles\n            // , ChonkyActions.DownloadFiles\n            , ChonkyActions.ToggleDarkMode],\n        []\n    );\n\n    const thumbnailGenerator = useCallback(\n        (file) =>\n            file.thumbnailUrl ? `https://chonky.io${file.thumbnailUrl}` : null,\n        []\n    );\n\n    return (\n        <Box sx={{ m: 2 }}>\n            <div style={{ height: 400 }}>\n                <FullFileBrowser\n                    files={files}\n                    folderChain={folderChain}\n                    fileActions={fileActions}\n                    onFileAction={handleFileAction}\n                    thumbnailGenerator={thumbnailGenerator}\n                    disableDefaultFileActions={false}\n                    darkMode={darkMode}\n                    {...props}\n                />\n            </div>\n        </Box>\n    );\n});\n\nexport default ChonkyBrowser;\n"],"names":["demoMap","require","React","props","darkMode","setDarkMode","useState","prepareCustomFileMap","baseFileMap","fileMap","rootFolderId","currentFolderId","setCurrentFolderId","deleteFiles","moveFiles","createFolder","useCustomFileMap","useMemo","setFileMap","resetFileMap","useCallback","currentFolderIdRef","useRef","useEffect","current","files","currentFileMap","newFileMap","forEach","file","id","parentId","parent","newChildrenIds","childrenIds","filter","childrenCount","length","source","destination","moveFileIds","Set","map","f","newSourceChildrenIds","has","newDestinationChildrenIds","idCounter","folderName","newFolderId","concat","name","isDir","modDate","Date","setChonkyDefaults","iconComponent","ChonkyIconFA","useFiles","fileId","folderChain","useFolderChain","currentFolder","parentFile","unshift","handleFileAction","useFileActionHandler","toggleDarkMode","data","ChonkyActions","OpenFiles","targetFile","payload","fileToOpen","FileHelper","isDirectory","DeleteFiles","state","selectedFilesForAction","MoveFiles","CreateFolder","prompt","ToggleDarkMode","fileActions","thumbnailGenerator","thumbnailUrl","_jsx","Box","sx","m","children","style","height","FullFileBrowser","onFileAction","disableDefaultFileActions"],"sourceRoot":""}