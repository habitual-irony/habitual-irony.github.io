{"version":3,"file":"static/js/114.13f7e51f.chunk.js","mappings":"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","sources":["Pages/Chonky/CustomActions.js","Pages/Chonky/ChonkyBrowser.js","Pages/Chonky/ChonkyLoader.js"],"sourcesContent":["import { defineFileAction, ChonkyIconName } from \"chonky\";\n\nconst uploadFileAction = defineFileAction({\n    id: \"upload\",\n    button: {\n        name: \"Upload\",\n        toolbar: true,\n        contextMenu: false,\n        icon: ChonkyIconName.upload\n    }\n});\n\nconst viewFileAction = defineFileAction({\n    id: \"view\",\n    requiresSelection: true,\n    fileFilter: (file) => !file.isDir,\n    button: {\n        name: \"View\",\n        toolbar: false,\n        contextMenu: true,\n        icon: ChonkyIconName.file\n    }\n});\n\nexport const customActions = [\n    viewFileAction,\n    uploadFileAction\n];\n","import React, {\n    useState,\n    useCallback,\n    useEffect,\n    useRef,\n    useMemo,\n} from \"react\";\n\n\nimport {\n    setChonkyDefaults,\n    ChonkyActions,\n    FileHelper,\n    FullFileBrowser,\n} from \"chonky\";\nimport { ChonkyIconFA } from \"chonky-icon-fontawesome\";\nimport { customActions } from \"./CustomActions\";\n\nimport Box from \"@mui/material/Box\";\n\nconst ChonkyBrowser = React.memo((props) => {\n    const [darkMode, setDarkMode] = useState(false);\n    const toggleDarkMode = () => {\n        setDarkMode(!darkMode);\n    };\n\n    const fileInputRef = useRef(null);\n    //const navigate  = useNavigate();\n\n    const demoMap = props.chonkyMap;\n\n    const prepareCustomFileMap = () => {\n        const baseFileMap = demoMap.fileMap;\n        const rootFolderId = demoMap.rootFolderId;\n        return { baseFileMap, rootFolderId };\n    };\n\n    const useCustomFileMap = () => {\n        const { baseFileMap, rootFolderId } = useMemo(prepareCustomFileMap, []);\n\n        const [fileMap, setFileMap] = useState(baseFileMap);\n        const [currentFolderId, setCurrentFolderId] = useState(rootFolderId);\n\n        const resetFileMap = useCallback(() => {\n            setFileMap(baseFileMap);\n            setCurrentFolderId(rootFolderId);\n        }, [baseFileMap, rootFolderId]);\n\n        const currentFolderIdRef = useRef(currentFolderId);\n        useEffect(() => {\n            currentFolderIdRef.current = currentFolderId;\n        }, [currentFolderId]);\n\n        const deleteFiles = useCallback((files) => {\n            setFileMap((currentFileMap) => {\n                const newFileMap = { ...currentFileMap };\n                files.forEach((file) => {\n                    delete newFileMap[file.id];\n\n                    if (file.parentId) {\n                        const parent = newFileMap[file.parentId];\n                        const newChildrenIds = parent.childrenIds.filter(\n                            (id) => id !== file.id\n                        );\n                        newFileMap[file.parentId] = {\n                            ...parent,\n                            childrenIds: newChildrenIds,\n                            childrenCount: newChildrenIds.length,\n                        };\n                    }\n                });\n\n                return newFileMap;\n            });\n        }, []);\n\n        const moveFiles = useCallback((files, source, destination) => {\n            setFileMap((currentFileMap) => {\n                const newFileMap = { ...currentFileMap };\n                const moveFileIds = new Set(files.map((f) => f.id));\n\n                const newSourceChildrenIds = source.childrenIds.filter(\n                    (id) => !moveFileIds.has(id)\n                );\n                newFileMap[source.id] = {\n                    ...source,\n                    childrenIds: newSourceChildrenIds,\n                    childrenCount: newSourceChildrenIds.length,\n                };\n\n                const newDestinationChildrenIds = [\n                    ...destination.childrenIds,\n                    ...files.map((f) => f.id),\n                ];\n                newFileMap[destination.id] = {\n                    ...destination,\n                    childrenIds: newDestinationChildrenIds,\n                    childrenCount: newDestinationChildrenIds.length,\n                };\n\n                files.forEach((file) => {\n                    newFileMap[file.id] = {\n                        ...file,\n                        parentId: destination.id,\n                    };\n                });\n\n                return newFileMap;\n            });\n        }, []);\n\n        const idCounter = useRef(0);\n        const createFolder = useCallback((folderName) => {\n            setFileMap((currentFileMap) => {\n                const newFileMap = { ...currentFileMap };\n\n                const newFolderId = `new-folder-${idCounter.current++}`;\n                newFileMap[newFolderId] = {\n                    id: newFolderId,\n                    name: folderName,\n                    isDir: true,\n                    modDate: new Date(),\n                    parentId: currentFolderIdRef.current,\n                    childrenIds: [],\n                    childrenCount: 0,\n                };\n\n                const parent = newFileMap[currentFolderIdRef.current];\n                newFileMap[currentFolderIdRef.current] = {\n                    ...parent,\n                    childrenIds: [...parent.childrenIds, newFolderId],\n                };\n\n                return newFileMap;\n            });\n        }, []);\n\n        const createFile = useCallback((fileName) => {\n            setFileMap((currentFileMap) => {\n                const newFileMap = { ...currentFileMap };\n\n                const newFolderId = `new-folder-${idCounter.current++}`;\n                newFileMap[newFolderId] = {\n                    id: newFolderId,\n                    name: fileName,\n                    modDate: new Date(),\n                    parentId: currentFolderIdRef.current,\n                    childrenIds: [],\n                    childrenCount: 0,\n                };\n\n                const parent = newFileMap[currentFolderIdRef.current];\n                newFileMap[currentFolderIdRef.current] = {\n                    ...parent,\n                    childrenIds: [...parent.childrenIds, newFolderId],\n                };\n\n                return newFileMap;\n            });\n        }, []);\n\n        return {\n            fileMap,\n            currentFolderId,\n            setCurrentFolderId,\n            resetFileMap,\n            deleteFiles,\n            moveFiles,\n            createFolder,\n            createFile,\n        };\n    };\n\n    const useFiles = (fileMap, currentFolderId) => {\n        return useMemo(() => {\n            const currentFolder = fileMap[currentFolderId];\n            const childrenIds = currentFolder.childrenIds;\n            const files = childrenIds.map((fileId) => fileMap[fileId]);\n            return files;\n        }, [currentFolderId, fileMap]);\n    };\n\n    const useFolderChain = (fileMap, currentFolderId) => {\n        return useMemo(() => {\n            const currentFolder = fileMap[currentFolderId];\n            const folderChain = [currentFolder];\n            let parentId = currentFolder.parentId;\n            while (parentId) {\n                const parentFile = fileMap[parentId];\n                if (parentFile) {\n                    folderChain.unshift(parentFile);\n                    parentId = parentFile.parentId;\n                } else {\n                    break;\n                }\n            }\n            return folderChain;\n        }, [currentFolderId, fileMap]);\n    };\n\n    const useFileActionHandler = (\n        folderChain,\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n        toggleDarkMode,\n        fileInputRef\n    ) => {\n        return useCallback(\n            (data) => {\n                if (data.id === ChonkyActions.OpenFiles.id) {\n                    const { targetFile, files } = data.payload;\n                    const fileToOpen = targetFile || files[0];\n\n                    if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n                        setCurrentFolderId(fileToOpen.id);\n                        return;\n                    }\n\n                    if(targetFile.name.endsWith(\".md\")) {\n                        let fileNames = data.state.selectedFiles.map((item) => item.name);\n                        let dirPath = folderChain.map((item) => item.name).join(\"/\");\n                        let filePath = `${dirPath}/${fileNames}`;\n\n                        // navigate(\"/tui-editor\", { state: { filePath } });\n                        localStorage.setItem(\"FILE_PATH\", JSON.stringify({ filePath }));\n                        window.open(\"/react-project/tui-editor\", \"_blank\");\n                    }\n                } else if (data.id === ChonkyActions.DeleteFiles.id) {\n                    deleteFiles(data.state.selectedFilesForAction);\n                } else if (data.id === ChonkyActions.MoveFiles.id) {\n                    moveFiles(\n                        data.payload.files,\n                        data.payload.source,\n                        data.payload.destination\n                    );\n                } else if (data.id === ChonkyActions.CreateFolder.id) {\n                    const folderName = prompt(\"Provide the name for your new folder:\");\n                    if (folderName) createFolder(folderName);\n                } else if (data.id === ChonkyActions.ToggleDarkMode.id) {\n                    toggleDarkMode();\n                } else if (data.id === \"view\") {\n                    let fileNames = data.state.selectedFiles.map((item) => item.name);\n                    let dirPath = folderChain.map((item) => item.name).join(\"/\");\n\n                    for (let name of fileNames) {\n                        console.log(`${dirPath}/${name}`);\n                    }\n                } else if (data.id === \"upload\") {\n                    fileInputRef.current.click();\n                }\n\n                console.log(data);\n            },\n            [createFolder, deleteFiles, moveFiles, setCurrentFolderId, toggleDarkMode]\n        );\n    };\n\n    const {\n        fileMap,\n        currentFolderId,\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n        createFile,\n    } = useCustomFileMap();\n\n    setChonkyDefaults({ iconComponent: ChonkyIconFA });\n\n    const files = useFiles(fileMap, currentFolderId);\n    const folderChain = useFolderChain(fileMap, currentFolderId);\n    const handleFileAction = useFileActionHandler(\n        folderChain,\n        setCurrentFolderId,\n        deleteFiles,\n        moveFiles,\n        createFolder,\n        toggleDarkMode,\n        fileInputRef\n    );\n\n    const fileActions = useMemo(\n        () => [\n            ...customActions,\n            ChonkyActions.CreateFolder,\n            ChonkyActions.DeleteFiles,\n            // ChonkyActions.CopyFiles,\n            // ChonkyActions.UploadFiles,\n            // ChonkyActions.DownloadFiles,\n            ChonkyActions.ToggleDarkMode,\n        ],\n        []\n    );\n\n    const thumbnailGenerator = useCallback(\n        (file) =>\n            file.thumbnailUrl ? `https://chonky.io${file.thumbnailUrl}` : null,\n        []\n    );\n\n    const fileUpload = async (e) => {\n        let files = e.target.files;\n        for (let file of files) {\n            if (file === undefined) continue;\n            createFile(file.name);\n        }\n    };\n\n    return (\n        <Box sx={{ m: 2 }}>\n            <input\n                type=\"file\"\n                ref={fileInputRef}\n                accept=\".json,.md\"\n                style={{ display: \"none\" }}\n                multiple\n                onChange={(e) => fileUpload(e)}\n            />\n\n            <div style={{ height: 400 }}>\n                <FullFileBrowser\n                    files={files}\n                    folderChain={folderChain}\n                    fileActions={fileActions}\n                    onFileAction={handleFileAction}\n                    thumbnailGenerator={thumbnailGenerator}\n                    // disableDefaultFileActions={true} // default false\n                    // doubleClickDelay={500} // ms\n                    // disableSelection={true} // default false 파일 선택이 해제됨\n                    // disableDragAndDrop={true} // 드래그 앤 드랍 기능 off\n                    // disableDragAndDropProvider={true} // default false, Provider : 다른 드래그 앤 드롭은 유지\n                    // defaultSortActionId={ChonkyActions.SortFilesByDate.id} // SortFilesByName, SortFilesBySize, SortFilesByDate\n                    // defaultFileViewActionId={ChonkyActions.EnableListView.id} // EnableGridView, EnableListView\n                    // clearSelectionOnOutsideClick={false} // default true 브라우저 외부 클릭 시 파일 선택 해제\n                    darkMode={darkMode}\n                    {...props}\n                />\n            </div>\n        </Box>\n    );\n});\n\nexport default ChonkyBrowser;\n","import React, { useEffect, useState } from \"react\";\nimport ChonkyBrowser from \"./ChonkyBrowser\";\n\n// import * as gh from \"./githublibrary.js\";\n\nconst ChonkyLoader = () => {\n  const [chonkyMap, setChonkyMap] = useState(undefined);\n\n  const getChonkyMap = async () => {\n    // let result = await gh.fileRead(\"actions/config/chonky_map.json\");\n    // if (result === undefined) return;\n\n    // let repoMap = JSON.parse(result);\n\n    // setChonkyMap(repoMap);\n  };\n\n  useEffect(() => {\n    getChonkyMap();\n  }, []);\n\n  return <div>{chonkyMap && <ChonkyBrowser chonkyMap={chonkyMap} />}</div>;\n};\n\nexport default ChonkyLoader;\n"],"names":["uploadFileAction","defineFileAction","id","button","name","toolbar","contextMenu","icon","ChonkyIconName","upload","customActions","requiresSelection","fileFilter","file","isDir","React","props","darkMode","setDarkMode","useState","fileInputRef","useRef","demoMap","chonkyMap","prepareCustomFileMap","baseFileMap","fileMap","rootFolderId","currentFolderId","setCurrentFolderId","deleteFiles","moveFiles","createFolder","createFile","useCustomFileMap","useMemo","setFileMap","resetFileMap","useCallback","currentFolderIdRef","useEffect","current","files","currentFileMap","newFileMap","forEach","parentId","parent","newChildrenIds","childrenIds","filter","childrenCount","length","source","destination","moveFileIds","Set","map","f","newSourceChildrenIds","has","newDestinationChildrenIds","idCounter","folderName","newFolderId","concat","modDate","Date","fileName","setChonkyDefaults","iconComponent","ChonkyIconFA","useFiles","fileId","folderChain","useFolderChain","currentFolder","parentFile","unshift","handleFileAction","useFileActionHandler","toggleDarkMode","data","ChonkyActions","OpenFiles","targetFile","payload","fileToOpen","FileHelper","isDirectory","endsWith","fileNames","state","selectedFiles","item","dirPath","join","filePath","localStorage","setItem","JSON","stringify","window","open","DeleteFiles","selectedFilesForAction","MoveFiles","CreateFolder","prompt","ToggleDarkMode","console","log","click","fileActions","thumbnailGenerator","thumbnailUrl","_jsxs","Box","sx","m","children","_jsx","type","ref","accept","style","display","multiple","onChange","e","async","target","undefined","fileUpload","height","FullFileBrowser","onFileAction","ChonkyLoader","setChonkyMap","getChonkyMap","ChonkyBrowser"],"sourceRoot":""}